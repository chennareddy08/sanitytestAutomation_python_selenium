import unittest,timefrom selenium.common.exceptions import NoSuchElementExceptionfrom selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECfrom selenium.common.exceptions import TimeoutExceptionfrom abc import abstractmethodclass BasePage(object):    """ All page objects inherit from this """    def __init__(self,driver):        self.driver  = driver    def signup_link(self):        self.wait = WebDriverWait(self.driver,20)        return self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,"#nav-box > nav:nth-of-type(2) > a.signupLink")))    def email_field(self):        """Function Verify email field """        return self.wait.until(EC.element_to_be_clickable((By.NAME,'email')))    def passowrd_field(self):        """Function Verify password field """        return self.wait.until(EC.element_to_be_clickable((By.NAME,'password')))    def signin_button(self):        """Function Verify Sign In button"""        return self.wait.until(EC.element_to_be_clickable((By.ID,'loginButton')))    def firstName_field(self):        """Function Verify first name field"""        return self.wait.until(EC.element_to_be_clickable((By.NAME,'firstname')))    def lastName_field(self):        """Function Verify last name field"""        return self.wait.until(EC.element_to_be_clickable((By.NAME,'lastname')))    def phoneNumber_field(self):        """Function Verify phone number"""        return self.wait.until(EC.element_to_be_clickable((By.NAME,'mobile')))    def create_account_button(self):        """Function Verify create account buttin is visible"""        return self.wait.until(EC.element_to_be_clickable((By.ID,'signupButton')))    def login_link(self):        """Function Verify sign link in create account screen"""        self.wait = WebDriverWait(self.driver,15)        return self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,"#signupForm > div.description-row > h5 > i.swap")))    # def forgot_password(self):    #     """Function to Verify Forgot password option is visible"""    #     return self.wait.until(EC.element_to_be_clickable((By.CLASS_NAME,"swap")))    def forgot_password(self):        return self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,'a.swap')))    def login_email_field(self):        """Function to Verify Email field in login option"""        return self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,"#loginForm > #user-information > div.user-info > input[name=\"email\"]")))    def login_password_Filed(self):        """Function to Verify password field in login option"""        return  self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,"#loginForm > #user-information > div.user-info > input[name=\"password\"]")))    def login_successfull(self):        """Function to Verify login is sucessful"""        for i in range(60):            try:                if "You are successfully logged in! Redirecting please wait..." == self.driver.find_element_by_xpath("//body/div[5]").text: break            except: pass        else:            self.driver.implicitly_wait(5)            return  self.driver.find_element_by_link_text('Log Out').text            #return print(self.driver.find_element_by_xpath("//body/div[5]").text)    def logout_button(self):         """Function to Verify logout is sucessful"""         return self.wait .until(EC.element_to_be_clickable((By.LINK_TEXT,'Log Out')))    def logout_successfull(self):        """Function to Verify logot is successful"""        return  (self.driver.find_element_by_class_name("signupLink").text)    def is_element_present(self, how, what):        try: self.driver.find_element(by=how, value=what)        except NoSuchElementException as e: return False        return True    def email_forgotpassword(self):        """        Function to check email field on forgot password recovery field        """        return self.wait.until(EC.element_to_be_clickable((By.ID,'forgotPasswordEmail')))    def submitButton_forgot(self):        """        Function to check submit on forgot password button        """        return self.wait.until(EC.element_to_be_clickable((By.ID,'forgotPasswordButton')))    def new_password(self):        """        Function to check new password field        """        return self.wait.until(EC.element_to_be_clickable((By.ID,'newpassword')))    def verify_password(self):        """        Function to check verifypassword field        """        return self.wait.until(EC.element_to_be_clickable((By.ID,'verifypassword')))    def change_passwd_button(self):        return self.wait.until(EC.element_to_be_clickable((By.LINK_TEXT,"Change Password")))    def restore_password(self):        return self.wait.until(EC.element_to_be_clickable((By.LINK_TEXT,"Restore")))    def select_gmailreset_passwordlink(self):        return self.wait.until(EC.element_to_be_clickable((By.XPATH,"//div[@class='y6']/span[contains(.,'You requested a new password')]")))    def gmail_logouttabdisplay(self):        return self.wait.until(EC.element_to_be_clickable((By.XPATH,"//div[@id=':5']/div/div/div/div/div/div[2]/div[3]/div/div")))    def user_account_creation(self,email,password,firstname,lastname,phonenumber):        """Function to create account or login the account"""        #self.driver.find_element_by_css_selector("#nav-box > nav:nth-of-type(2) > a.signupLink").click()        assert  ((self.driver.find_element_by_xpath(".//*[@id='signupForm']/div[1]/h3")).text)=='Create Account'        BasePage.email_field(self).send_keys('a' + email)        BasePage.passowrd_field(self).send_keys(password)        BasePage.firstName_field(self).send_keys(firstname)        BasePage.lastName_field(self).send_keys(lastname)        BasePage.phoneNumber_field(self).send_keys(phonenumber)        BasePage.create_account_button(self).click()        self.driver.implicitly_wait(5)    def login_account(self,email,password):        #BasePage.login_link(self).click()        BasePage.login_email_field(self).send_keys(email)        BasePage.login_password_Filed(self).send_keys(password)        BasePage.signin_button(self).click()    def forgot_passwordcheck(self,Email):        BasePage.signup_link(self).click()        self.driver.implicitly_wait(5)        BasePage.login_link(self).click()        assert (self.driver.find_element_by_css_selector("a.swap")).text == 'Forgot your password?'        BasePage.forgot_password(self).click()        assert (self.driver.find_element_by_css_selector('#resetPasswordForm > div.description-row > h3')).text == 'Forgot your password?'        assert (self.driver.find_element_by_css_selector('#resetPasswordForm > div.description-row > h5 > i.swap')).text == 'Sign In'        assert (self.driver.find_element_by_css_selector("#forgotPasswordButton")).get_attribute('value') == 'Reset Password'        BasePage.email_forgotpassword(self).send_keys(Email)        BasePage.submitButton_forgot(self).click()        demo=self.driver.find_element_by_xpath("//body/div[5]")        e1=(self.driver.execute_script("return arguments[0].textContent",demo))        print (e1)        print(self.driver.title)        time.sleep(20)        #assert e1 == 'Reset Password link has been sent to email provided.'        #assert (self.driver.find_element_by_css_selector("h1.ui-title")).text == 'Change Password'    def change_password(self,password,confirm_password):        BasePage.new_password(self).clear()        BasePage.new_password(self).send_keys(password)        BasePage.verify_password(self).clear()        BasePage.verify_password(self).send_keys(confirm_password)        assert (self.driver.find_element_by_css_selector('a.btn.btn-green.submit-change.ui-link')).text == 'Change Password'        BasePage.change_passwd_button(self).click()        self.driver.implicitly_wait(10)    def login_gmail(self,email,password):        self.driver.get('https://accounts.google.com/ServiceLogin?service=mail&passive=true&rm=false&continue=https://mail.google.com/mail/&ss=1&scc=1&ltmpl=default&ltmplcache=2&emr=1&osid=1#identifier')        self.driver.implicitly_wait(10)        self.driver.find_element_by_id('Email').send_keys(email)        self.driver.implicitly_wait(5)        self.driver.find_element_by_id('next').submit()        self.driver.implicitly_wait(5)        self.driver.find_element_by_id('Passwd').send_keys(password)        self.driver.implicitly_wait(5)        self.driver.find_element_by_id("signIn").click()        self.driver.implicitly_wait(40)    def mail_passwordrecover(self):        #User_Account.login_gmail(self,'rebertjacob@gmail.com','7259692024')        self.driver.get('https://www.gmail.com')        time.sleep(15)        try:            BasePage.select_gmailreset_passwordlink(self).click()        except TimeoutException:            BasePage.select_gmailreset_passwordlink(self).click()        self.driver.implicitly_wait(10)        self. driver.find_element_by_link_text("https://handstandapp.com/index.php/registration/registration/recovery/key/480fbea80811abbd1362e1fdd5f83287314a98f73d77cc1c63cd490fc9af5912df51cfbb0f68f1ab7274e44c717699571a37544b3b2f4cf921cf32f25f0cfd3a/email/rebertjacob%40gmail.com").click()        self.driver.switch_to.window(self.driver.window_handles[-1])        print(self.driver.title)        time.sleep(10)        try:            while self.driver.title == 'Change Password':                assert self.driver.find_element_by_css_selector("h1.ui-title").text=='Change Password'                BasePage.change_password(self,'7259692024','7259692024')        except NoSuchElementException:            assert self.driver.title=='Password Recovery'            print (self.driver.title)            BasePage.login_gmail(self,'rebertjacob@gmail.com','7259692024')            time.sleep(10)            BasePage.select_gmailreset_passwordlink(self).click()            self. driver.find_element_by_link_text("https://handstandapp.com/index.php/registration/registration/recovery/key/480fbea80811abbd1362e1fdd5f83287314a98f73d77cc1c63cd490fc9af5912df51cfbb0f68f1ab7274e44c717699571a37544b3b2f4cf921cf32f25f0cfd3a/email/rebertjacob%40gmail.com").click()            self.driver.switch_to.window(self.driver.window_handles[-1])            assert self.driver.title == 'Change Password'            print(self.driver.title)            BasePage.change_password(self,'7259692024','7259692024')            print ('\033[1;31mf navigate change password screen\033[1;m')    def forgot_pass_cleanup(self):        BasePage.login_gmail(self,'rebertjacob@gmail.com','7259692024')        self.driver.implicitly_wait(10)        try:            while self.driver.find_element_by_xpath("//div[@class='y6']/span[contains(.,'You requested a new password')]").text=="You requested a new password":                self.driver.find_element_by_xpath("//div[@id=':3f']/div").click()                self.driver.implicitly_wait(5)                BasePage.gmail_logouttabdisplay(self).click()        except NoSuchElementException:             self.driver.find_element_by_css_selector("span.gb_Za.gbii").click()             self.driver.find_element_by_id("gb_71").click()    def Homepage_check(self):        if self.driver.title=="Handstand":            assert self.driver.title=="Handstand"            assert self.driver.find_element_by_link_text("Contact Us").text== "Contact Us"            assert self.driver.find_element_by_xpath("(//a[contains(text(),'How it Works')])[2]").text=="How it Works"            assert self.driver.find_element_by_xpath("(//a[contains(text(),'About')])[2]").text=="About"            assert self.driver.find_element_by_xpath("(//a[contains(text(),'Blog')])[2]").text=="Blog"            assert self.driver.find_element_by_xpath("(//a[contains(text(),'Apply to be a trainer')])[2]").text=="Apply to be a trainer"            assert self.driver.find_element_by_xpath("(//a[contains(text(),'Log In')])[2]").text=="Log In"            assert self.driver.find_element_by_css_selector("#nav-box > #logo > a > img[alt=\"logo.png\"]").is_displayed()            assert self.driver.find_element_by_css_selector("h1").text=="Your Trainer, On Demand"            assert self.driver.find_element_by_css_selector("h4.sub-header").text=="$69. No Contracts. No Tips. No Hassle. A workout when you want it. \n Yoga, Boxing, Dance, Training, Pilates and more."            assert self.driver.find_element_by_css_selector("label").text==r"^exact:Where do you want to workout[\s\S]$"            assert self.driver.find_element_by_css_selector("img[alt=\"apple_store.png\"]").is_displayed            assert self.driver.find_element_by_xpath("(//img[@alt='apple_store.png'])[2]").is_displayed()            assert self.driver.find_element_by_css_selector("input[type=\"submit\"]").is_displayed()            assert self.driver.find_element_by_css_selector("img[alt=\"clock_hd.png\"]").is_displayed()            assert self.driver.find_element_by_css_selector("img[alt=\"clock_hd.png\"]").is_displayed()            assert self.driver.find_element_by_css_selector("img[alt=\"mountain_hd.png\"]").is_displayed()            assert self.driver.find_element_by_css_selector("img[alt=\"dollar_hd.png\"]").is_displayed()            assert self.driver.find_element_by_css_selector("h3").text=="Save Time. Have Your Workout Come To You."            assert self.driver.find_element_by_xpath("(//div[@id='item']/h3)[2]").text=="Embrace Variety. Try a New Workout, Conveniently."            assert self.driver.find_element_by_xpath("(//div[@id='item']/h3)[3]").text=="Save Money"            assert self.driver.find_element_by_css_selector("p").text=="Sit back, browse, and book a top trainer, instructor, or coach come to you. No more traffic, missed workouts, parking hassles, or inconvenient class times."            assert self.driver.find_element_by_xpath("(//div[@id='item']/p)[2]").text=="With Handstand, you're able to try all types of workouts without scouring the web and driving all around town."            assert self.driver.find_element_by_xpath("(//div[@id='item']/p)[3]").text=="By eliminating gyms, we don't have to worry about paying rent or buying expensive machines you'll never use. You can enjoy your favorites at a price that's right."            assert self.driver.find_element_by_css_selector("img[alt=\"active_logo_light.png\"]").is_displayed()            assert self.driver.find_element_by_css_selector("img[alt=\"ABC7_logo_color.png\"]").is_displayed()            assert self.driver.find_element_by_css_selector("img[alt=\"KCAL_9_logo_color.png\"]").is_displayed()            assert self.driver.find_element_by_css_selector("img[alt=\"LA_times_logo_light.png\"]").is_displayed()            assert self.driver.find_element_by_css_selector("img[alt=\"insidehook_logo_light.png\"]").is_displayed()            assert self.driver.find_element_by_css_selector("img[alt=\"rackedLA_logo_light.png\"]").is_displayed()            assert self.driver.find_element_by_css_selector("img[alt=\"SMDailyPress_logo_light.png\"]").is_displayed()            assert self. driver.find_element_by_css_selector("#vouchers > h3").text=="Featured In:"            assert self.driver.find_element_by_link_text("twitter").text=="twitter"            assert self.driver.find_element_by_link_text("facebook").text=="facebook"            assert self.driver.find_element_by_link_text("instagram").text=="instagram"            assert self.driver.find_element_by_link_text("Privacy Policy").text=="Privacy Policy"            assert self.driver.find_element_by_link_text("Terms and Conditions").text=="Terms and Conditions"            assert self.driver.find_element_by_link_text("FAQ").text=="FAQ"            assert self.driver.find_element_by_id("phone").text=="Phone: 1-(855) 787-3968"            assert self.driver.find_element_by_xpath("//div[@id='footer-contact']/h5[2]/span").text=="Email:"            assert self.driver.find_element_by_link_text("info@handstandapp.com").text=="info@handstandapp.com"            self.driver.switch_to.frame(self.driver.find_element_by_css_selector("iframe[src='about:blank']"))            assert Booking.leavemsg_widget(self).is_displayed()            self.driver.switch_to.default_content()            print("Home is displayed and verified all the element on home screen")        else:            passclass InvalidPageException(Exception):    """ Throw this exception when you don't find the correct page """    pass